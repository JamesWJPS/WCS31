name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
        viewport: [desktop, tablet, mobile]
      fail-fast: false
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: test
      
      - name: Start application
        run: |
          npm run start &
          npm run dev:frontend &
          sleep 30
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cms_test
      
      - name: Wait for application
        run: |
          npx wait-on http://localhost:3000/api/health
          npx wait-on http://localhost:5173
      
      - name: Run E2E tests
        uses: cypress-io/github-action@v6
        with:
          browser: ${{ matrix.browser }}
          spec: cypress/e2e/**/*.cy.ts
          wait-on: 'http://localhost:5173, http://localhost:3000/api/health'
          wait-on-timeout: 120
          config: viewportWidth=1280,viewportHeight=720
        env:
          CYPRESS_baseUrl: http://localhost:5173
          CYPRESS_apiUrl: http://localhost:3000/api
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-results-${{ matrix.browser }}-${{ matrix.viewport }}
          path: |
            cypress/screenshots
            cypress/videos
            cypress/reports
          retention-days: 7
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.browser == 'chrome' && matrix.viewport == 'desktop'
        with:
          file: coverage/lcov.info
          flags: e2e
          name: e2e-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  accessibility-tests:
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build and start application
        run: |
          npm run build
          npm run start &
          npm run dev:frontend &
          sleep 30
        env:
          NODE_ENV: test
      
      - name: Run accessibility tests
        run: npm run test:accessibility
        env:
          CYPRESS_baseUrl: http://localhost:5173
          CYPRESS_apiUrl: http://localhost:3000/api
      
      - name: Generate accessibility report
        run: |
          npx cypress run --spec 'cypress/e2e/**/*.cy.ts' \
            --reporter json \
            --reporter-options "reporterEnabled=json,outputFile=cypress/reports/accessibility-results.json"
      
      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-results
          path: cypress/reports/accessibility-results.json

  performance-tests:
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build and start application
        run: |
          npm run build
          npm run start &
          npm run dev:frontend &
          sleep 30
        env:
          NODE_ENV: test
      
      - name: Run performance tests
        run: npm run test:e2e:performance
        env:
          CYPRESS_baseUrl: http://localhost:5173
          CYPRESS_apiUrl: http://localhost:3000/api
      
      - name: Generate performance report
        run: |
          node -e "
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('cypress/reports/performance-results.json', 'utf8'));
            const report = {
              timestamp: new Date().toISOString(),
              averageLoadTime: results.tests.reduce((sum, test) => sum + (test.loadTime || 0), 0) / results.tests.length,
              slowestTest: results.tests.reduce((prev, current) => (prev.loadTime > current.loadTime) ? prev : current),
              passedTests: results.tests.filter(test => test.state === 'passed').length,
              totalTests: results.tests.length
            };
            fs.writeFileSync('cypress/reports/performance-summary.json', JSON.stringify(report, null, 2));
          "
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            cypress/reports/performance-results.json
            cypress/reports/performance-summary.json

  visual-regression-tests:
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build and start application
        run: |
          npm run build
          npm run start &
          npm run dev:frontend &
          sleep 30
        env:
          NODE_ENV: test
      
      - name: Run visual regression tests
        run: npm run test:e2e:visual
        env:
          CYPRESS_baseUrl: http://localhost:5173
          CYPRESS_apiUrl: http://localhost:3000/api
      
      - name: Upload visual regression results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-regression-results
          path: |
            cypress/screenshots
            cypress/snapshots

  test-summary:
    runs-on: ubuntu-latest
    needs: [e2e-tests, accessibility-tests, performance-tests, visual-regression-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Generate test summary
        run: |
          echo "# E2E Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **E2E Tests**: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Accessibility Tests**: ${{ needs.accessibility-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests**: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Visual Regression Tests**: ${{ needs.visual-regression-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Test artifacts have been uploaded and are available for download." >> $GITHUB_STEP_SUMMARY
      
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('E2E Test Results')
            );
            
            const body = `## E2E Test Results
            
            | Test Suite | Status |
            |------------|--------|
            | E2E Tests | ${{ needs.e2e-tests.result == 'success' ? '✅ Passed' : '❌ Failed' }} |
            | Accessibility | ${{ needs.accessibility-tests.result == 'success' ? '✅ Passed' : '❌ Failed' }} |
            | Performance | ${{ needs.performance-tests.result == 'success' ? '✅ Passed' : '❌ Failed' }} |
            | Visual Regression | ${{ needs.visual-regression-tests.result == 'success' ? '✅ Passed' : '❌ Failed' }} |
            
            View detailed results in the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }